@page "/editor"
@inject MapService mapService
@inject ComponentService componentService
@inject ItemService itemService
@inject NpcService npcService
@inject EnemyService enemyService
@inject PlayerService playerService
@attribute [Authorize]
@using System.Timers

<div class="editor">
    <div class="editor-toolbar">
        <fieldset>
            <legend>File</legend>
            <button class="button-stretch button-small" @onclick="() => OpenMap(mapService.New())">New</button>
            <button class="button-stretch button-small" @onclick="Save">Save</button>
            <input type="checkbox" @bind="EnableAutoSave" /> Auto-save <br />
            @if (LastSaveTime != DateTime.MinValue)
            {
                <span><b>Last save:</b> @LastSaveTime</span>
            }
            else if (Map != null)
            {
                <b>Not saved</b>
            }
            <hr />
            @if (Map != null)
            {
                <b>@Map.Name</b> <br />
                <span>@Map.Description</span> <br />
                <span><b>Size:</b> @Map.Width x @Map.Height</span> <br />
            }
            else
            {
                <i>No map opened</i>
            }
        </fieldset>
        <fieldset>
            <legend>Tools</legend>
            <div>
                <table>
                    <tr>
                        <td><b>Tile</b>: <input type="text" @bind="SelectedTileIndex" style="width: 48px;" /></td>
                        <td style="width: 40px;"><div class="tile tile-@SelectedTileIndex"></div></td>
                    </tr>
                </table>
            </div>
            <EditorButton Text="Pen" Active="Mode == DrawMode.Pen" OnClickCallback="() => SetMode(DrawMode.Pen)" />
            <EditorButton Text="Rectangle" Active="Mode == DrawMode.Rectangle" OnClickCallback="() => SetMode(DrawMode.Rectangle)" />
            <EditorButton Text="Fill" Active="Mode == DrawMode.Fill" OnClickCallback="() => SetMode(DrawMode.Fill)" />
            <EditorButton Text="All" Active="Mode == DrawMode.All" OnClickCallback="() => SetMode(DrawMode.All)" />
            <EditorButton Text="Copy" Active="Mode == DrawMode.Copy" OnClickCallback="() => SetMode(DrawMode.Copy)" />
            <EditorButton Text="Remove" Active="Mode == DrawMode.Remove" OnClickCallback="() => SetMode(DrawMode.Remove)" />
        </fieldset>
        <fieldset>
            <legend>Layers</legend>
            <EditorButton Text="Overlay" Active="Layer == 2" OnClickCallback="() => SetLayer(2)" />
            <EditorButton Text="Solid" Active="Layer == 1" OnClickCallback="() => SetLayer(1)" />
            <EditorButton Text="Floor" Active="Layer == 0" OnClickCallback="() => SetLayer(0)" />
        </fieldset>
        <fieldset>
            <legend>Nav</legend>
            <table>
                <tr>
                    <td>X</td>
                    <td><input type="text" @bind="Position.X" /></td>
                    <td>Y</td>
                    <td><input type="text" @bind="Position.Y" /></td>
                </tr>
            </table>
            <hr/>
            <table class="table-borderless">
                <tr>
                    <td></td>
                    <td><button class="button-stretch button-small button-nav" @onclick="() => Move(0, -5)">Up</button></td>
                    <td></td>
                </tr>
                <tr>
                    <td><button class="button-stretch button-small button-nav" @onclick="() => Move(-5, 0)">Left</button></td>
                    <td><button class="button-stretch button-small button-nav" @onclick="() => Move(-Position.X, -Position.Y)">Reset</button></td>
                    <td><button class="button-stretch button-small button-nav" @onclick="() => Move(5, 0)">Right</button></td>
                </tr>
                <tr>
                    <td></td>
                    <td><button class="button-stretch button-small button-nav" @onclick="() => Move(0, 5)">Down</button></td>
                    <td></td>
                </tr>
            </table>
        </fieldset>
        <p style="font-size: 85%; color: #999; text-align: center;">
            RPG Editor v0.1 (alpha)
        </p>
    </div>
    <div class="editor-panel">
        <div class="map-panel">
            <div class="map">
                @if (Map != null)
                {
                    for (int y = 0; y < 25; y++)
                    {
                        <div class="map-row">
                            @for (int x = 0; x < 25; x++)
                            {
                                (int x, int y) position = (x + Position.X, y + Position.Y);
                                <div class="map-tile" @onclick="() => Click(position)" @onkeydown="KeyboardHandler">
                                    @for (int layer = 0; layer < Map.Layers; layer++)
                                    {
                                        var tileId = Map[layer, position.x, position.y];
                                        if (tileId != 0)
                                        {
                                            <div class="map-tile-layer">
                                                <div class="tile tile-@tileId"></div>
                                            </div>
                                        }
                                    }
                                    @if (FirstSelectedPoint == position)
                                    {
                                        <div class="map-tile-layer">
                                            <div class="tile tile-10"></div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                }
                else
                {
                    <div style="width: 100%; text-align: center; margin-top: 360px; font-size: 36pt; color: #111; font-weight: bold;">NO MAP DATA</div>
                }
                <div style="clear: both;"></div>
            </div>
        </div>
        <div class="tile-panel">
            <TilesetViewer TileIndex="SelectedTileIndex" TileChanged="OnTileChanged" />
        </div>
    </div>
    <div class="editor-data">

        <!-- Maps -->
        <fieldset>
            <legend>Maps</legend>
            <table class="table-condensed">
                <thead>
                    <tr>
                        <td>Map</td>
                        <td>Description</td>
                        <td>Width</td>
                        <td>Height</td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var map in mapService.All())
                    {
                        <tr>
                            <td class="form-large"><input type="text" @bind="map.Name" /></td>
                            <td><input type="text" @bind="map.Description" /></td>
                            <td class="form-small"><input type="text" @bind="map.Width" /></td>
                            <td class="form-small"><input type="text" @bind="map.Height" /></td>
                            <td class="form-xmedium">
                                <button class="button-small" @onclick="() => OpenMap(map)">load</button>
                                <button class="button-small" @onclick="() => map.Resize()">resize</button>
                                <button class="button-small" @onclick="() => mapService.Remove(map)">&#10060;</button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5"><button class="button-small" @onclick="() => mapService.New()">new</button></td>
                    </tr>
                </tfoot>
            </table>
        </fieldset>

        <!-- Items -->
        <fieldset>
            <legend>Items</legend>
            <table class="table-condensed">
                <thead>
                    <tr>
                        <td class="form-large">Name</td>
                        <td>Description</td>
                        <td class="form-medium">Type</td>
                        <td class="form-normal">Value</td>
                        <td class="form-normal"></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in itemService.All())
                    {
                        <tr>
                            <td><input type="text" @bind="item.Name" /></td>
                            <td><input type="text" @bind="item.Description" /></td>
                            <td>@Item.GetItemType(item)</td>
                            <td><input type="text" @bind="item.Value" /></td>
                            <td>
                                <button class="button-small" @onclick="() => itemService.Remove(item)">&#10060;</button>
                                <button class="button-small" @onclick="() => DisplayItemProperties(item)">&#129146;</button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5">
                            <button class="button-small" @onclick="() => itemService.New()">new item</button>
                            <button class="button-small" @onclick="() => itemService.New(ItemType.Weapon)">new weapon</button>
                            <button class="button-small" @onclick="() => itemService.New(ItemType.Armor)">new armor</button>
                            <button class="button-small" @onclick="() => itemService.New(ItemType.Jewelry)">new jewelry</button>
                            <button class="button-small" @onclick="() => itemService.New(ItemType.Consumable)">new consumable</button>
                            <button class="button-small" @onclick="() => itemService.New(ItemType.Book)">new book</button>
                            <button class="button-small" @onclick="() => itemService.New(ItemType.Material)">new material</button>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </fieldset>

        <!-- Players -->
        <fieldset>
            <legend>Players</legend>
            <table class="table-condensed">
                <thead>
                    <tr>
                        <td>ID</td>
                        <td>Name</td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in playerService.All())
                    {
                        <tr>
                            <td class="form-xlarge"><input type="text" @bind="player.Id" /></td>
                            <td><input type="text" @bind="player.Name" /></td>
                            <td class="form-medium">
                                <button class="button-small" @onclick="() => playerService.Remove(player)">&#10060;</button>
                                <button class="button-small" @onclick="() => DisplayPlayerProperties(player)">&#129146;</button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5"><button class="button-small" @onclick="() => playerService.New()">new</button></td>
                    </tr>
                </tfoot>
            </table>
        </fieldset>

        <!-- Enemies -->
        <fieldset>
            <legend>Enemies</legend>
            <table class="table-condensed">
                <thead>
                    <tr>
                        <td>ID</td>
                        <td>Name</td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var enemy in enemyService.All())
                    {
                        <tr>
                            <td class="form-xlarge"><input type="text" @bind="enemy.Id" /></td>
                            <td><input type="text" @bind="enemy.Name" /></td>
                            <td class="form-medium">
                                <button class="button-small" @onclick="() => enemyService.Remove(enemy)">&#10060;</button>
                                <button class="button-small" @onclick="() => DisplayEnemyProperties(enemy)">&#129146;</button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5"><button class="button-small" @onclick="() => enemyService.New()">new</button></td>
                    </tr>
                </tfoot>
            </table>
        </fieldset>

        <!-- NPCs -->
        <fieldset>
            <legend>NPCs</legend>
            <table class="table-condensed">
                <thead>
                    <tr>
                        <td>ID</td>
                        <td>Name</td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var npc in npcService.All())
                    {
                        <tr>
                            <td class="form-xlarge"><input type="text" @bind="npc.Id" /></td>
                            <td><input type="text" @bind="npc.Name" /></td>
                            <td class="form-medium">
                                <button class="button-small" @onclick="() => npcService.Remove(npc)">&#10060;</button>
                                <button class="button-small" @onclick="() => DisplayNpcProperties(npc)">&#129146;</button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5"><button class="button-small" @onclick="() => npcService.New()">new</button></td>
                    </tr>
                </tfoot>
            </table>
        </fieldset>
    </div>
    <div class="editor-properties">
        <fieldset>
            <legend>Properties</legend>
            @if (ShowItemProperties && ItemProperties != null)
            {
                <table>
                    <tbody>
                        <tr>
                            <td>ID</td>
                            <td><input type="text" disabled @bind="ItemProperties.Id" /></td>
                        </tr>
                        <tr>
                            <td>Tile</td>
                            <td>
                                <table class="table-borderless table-nopadding">
                                    <tr>
                                        <td>Tile Id</td>
                                        <td><input type="text" @bind="ItemProperties.TileId" /></td>
                                        <td><div class="tile tile-@ItemProperties.TileId"></div></td>
                                    </tr>
                                    <tr>
                                        <td colspan="3"><button class="button-stretch button-small" @onclick="() => ItemProperties.TileId = SelectedTileIndex">set tile</button></td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        @if (ItemProperties is Equipment eq)
                        {
                            <tr>
                                <td>Equipped tile</td>
                                <td>
                                    <table class="table-borderless table-nopadding">
                                        <tr>
                                            <td>Tile Id</td>
                                            <td><input type="text" @bind="eq.EquippedTileId" /></td>
                                            <td>
                                                <div class="map-tile">
                                                    <div class="map-tile-layer">
                                                        <div class="tile tile-1956"></div>
                                                    </div>
                                                    <div class="map-tile-layer">
                                                        <div class="tile tile-@eq.EquippedTileId"></div>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="3"><button class="button-stretch button-small" @onclick="() => eq.EquippedTileId = SelectedTileIndex">set tile</button></td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        }
                        <tr>
                            <td>Name</td>
                            <td><input type="text" @bind="ItemProperties.Name" /></td>
                        </tr>
                        <tr>
                            <td>Description</td>
                            <td><input type="text" @bind="ItemProperties.Description" /></td>
                        </tr>
                        <tr>
                            <td>Type</td>
                            <td><input type="text" value="@Item.GetItemType(ItemProperties)" disabled /></td>
                        </tr>
                        <tr>
                            <td>Grade</td>
                            <td>
                                <select class="stretch" @bind="ItemProperties.Grade">
                                    <option value="Common">Common</option>
                                    <option value="Rare">Rare</option>
                                    <option value="Unique">Unique</option>
                                    <option value="Legendary">Legendary</option>
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td>Value</td>
                            <td><input type="text" @bind="ItemProperties.Value" /></td>
                        </tr>
                        <tr>
                            <td>Level</td>
                            <td><input type="text" @bind="ItemProperties.Level" /></td>
                        </tr>
                        <tr>
                            <td>Discardable</td>
                            <td><input type="checkbox" @bind="ItemProperties.Discardable" /></td>
                        </tr>
                        <tr>
                            <td>Sellable</td>
                            <td><input type="checkbox" @bind="ItemProperties.Sellable" /></td>
                        </tr>
                        @if (ItemProperties is Equipment equipment)
                        {
                            <tr>
                                <td>Attributes required</td>
                                <td>
                                    <table class="table-borderless table-smallpadding">
                                        <tr>
                                            <td>Strength</td>
                                            <td><input type="text" @bind="equipment.AttributesRequired.Strength" /></td>
                                        </tr>
                                        <tr>
                                            <td>Dexterity</td>
                                            <td><input type="text" @bind="equipment.AttributesRequired.Dexterity" /></td>
                                        </tr>
                                        <tr>
                                            <td>Constitution</td>
                                            <td><input type="text" @bind="equipment.AttributesRequired.Constitution" /></td>
                                        </tr>
                                        <tr>
                                            <td>Intelligence</td>
                                            <td><input type="text" @bind="equipment.AttributesRequired.Intelligence" /></td>
                                        </tr>
                                        <tr>
                                            <td>Wisdom</td>
                                            <td><input type="text" @bind="equipment.AttributesRequired.Wisdom" /></td>
                                        </tr>
                                        <tr>
                                            <td>Memory</td>
                                            <td><input type="text" @bind="equipment.AttributesRequired.Memory" /></td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                            <tr>
                                <td>Enchantment level</td>
                                <td><input type="text" @bind="equipment.EnchantmentLevel" /></td>
                            </tr>
                        }
                        @if (ItemProperties is Weapon weapon)
                        {
                            <tr>
                                <td>Weapon type</td>
                                <td>
                                    <select class="stretch" @bind="weapon.WeaponType">
                                        <option value="OneHanded">One-handed</option>
                                        <option value="TwoHanded">Two-handed</option>
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <td>Damage type</td>
                                <td>
                                    <select class="stretch" @bind="weapon.DamageType">
                                        <option value="Physical">Physical damage</option>
                                        <option value="Magic">Magic damage</option>
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <td>Damage</td>
                                <td>
                                    <table class="table-borderless table-smallpadding">
                                        <tr>
                                            <td>Min</td>
                                            <td><input type="text" @bind="weapon.MinDamage" /></td>
                                        </tr>
                                        <tr>
                                            <td>Max</td>
                                            <td><input type="text" @bind="weapon.MaxDamage" /></td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        }
                        @if (ItemProperties is Armor armor)
                        {
                            <tr>
                                <td>Armor type</td>
                                <td>
                                    <select @bind="armor.ArmorType" class="stretch">
                                        <option value="Shield">Shield</option>
                                        <option value="Headwear">Headwear</option>
                                        <option value="Body">Body</option>
                                        <option value="Gloves">Gloves</option>
                                        <option value="Boots">Boots</option>
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <td>Defense</td>
                                <td><input type="text" @bind="armor.Defense" /></td>
                            </tr>
                        }
                        @if (ItemProperties is Jewelry jewelry)
                        {
                            <tr>
                                <td>Jewelry type</td>
                                <td>
                                    <select @bind="jewelry.JewelryType" class="stretch">
                                        <option value="Necklace">Necklace</option>
                                        <option value="Ring">Ring</option>
                                        <option value="Earring">Earring</option>
                                    </select>
                                </td>
                            </tr>
                        }
                        @if (ItemProperties is Book book)
                        {
                            <tr>
                                <td>Pages</td>
                                <td><input type="text" @bind="book.Pages" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else if (ShowPlayerProperties && PlayerProperties != null)
            {
                <p>Player properties</p>
            }
            else if (ShowEnemyProperties && EnemyProperties != null)
            {
                <p>Enemy properties</p>
            }
            else if (ShowNpcProperties && NpcProperties != null)
            {
                <p>NPC properties</p>
            }
            else
            {
                <p>No entity selected.</p>
            }
        </fieldset>
    </div>
</div>

@code {
    private Map Map { get; set; }
    private enum DrawMode { Pen, Rectangle, All, Fill, Copy, Remove };
    private DrawMode Mode { get; set; }
    private int SelectedTileIndex = 951;
    private Timer AutoSaveTimer;
    private bool EnableAutoSave = true;
    private int Layer = 0;
    private (int X, int Y) Position = (0, 0);
    private DateTime LastSaveTime = DateTime.MinValue;
    private Timer UpdateTimer;
    private (int x, int y)? FirstSelectedPoint { get; set; }

    protected override void OnInitialized()
    {
        AutoSaveTimer = new Timer();
        AutoSaveTimer.Interval = 1000 * 60;
        AutoSaveTimer.Elapsed += AutoSave;
        AutoSaveTimer.AutoReset = true;
        AutoSaveTimer.Start();
        UpdateTimer = new Timer();
        UpdateTimer.Interval = 200;
        UpdateTimer.AutoReset = true;
        UpdateTimer.Elapsed += UpdateTimerElapsed;
        UpdateTimer.Start();
        base.OnInitialized();
    }

    private void UpdateTimerElapsed(object sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    void OnTileChanged(int index)
    {
        // Called from child component, so we need to notify
        // the parent that the state has changed.
        SelectedTileIndex = index;
        StateHasChanged();
    }

    private void Save()
    {
        mapService.Save();
        itemService.Save();
        npcService.Save();
        enemyService.Save();
        playerService.Save();
        LastSaveTime = DateTime.Now;
    }

    private void OpenMap(Map map)
    {
        Map = map;
    }

    private void SetMode(DrawMode mode)
    {
        FirstSelectedPoint = null;
        Mode = mode;
    }

    private void SetLayer(int layer)
    {
        Layer = layer;
    }

    private void AutoSave(object sender, EventArgs args)
    {
        if (EnableAutoSave)
        {
            Save();
        }
    }

    private void KeyboardHandler(KeyboardEventArgs args)
    {
        if (args.CtrlKey && args.Key == "s")
        {
            Save();
        }
    }

    private void Click((int x, int y) position)
    {
        switch (Mode)
        {
            case DrawMode.Pen:
                Map[Layer, position.x, position.y] = SelectedTileIndex;
                break;
            case DrawMode.Remove:
                Map[Layer, position.x, position.y] = 0;
                break;
            case DrawMode.Copy:
                SelectedTileIndex = Map[Layer, position.x, position.y];
                Mode = DrawMode.Pen;
                break;
            case DrawMode.Fill:
                Map.FloodFill(Layer, position.x, position.y, SelectedTileIndex);
                break;
            case DrawMode.All:
                Map.FillLayer(Layer, SelectedTileIndex);
                break;
            case DrawMode.Rectangle:
                if (FirstSelectedPoint == null)
                {
                    FirstSelectedPoint = position;
                }
                else if (FirstSelectedPoint == position)
                {
                    FirstSelectedPoint = null;
                }
                else
                {
                    Map.FillRectangle(Layer, FirstSelectedPoint.Value, position, SelectedTileIndex);
                    FirstSelectedPoint = null;
                }
                break;

        }
    }

    private bool ShowItemProperties { get; set; } = false;
    private Item ItemProperties { get; set; }
    private void DisplayItemProperties(Item item)
    {
        DisableAllPropertyDisplays();
        ItemProperties = item;
        ShowItemProperties = true;
    }

    private bool ShowPlayerProperties { get; set; } = false;
    private Player PlayerProperties { get; set; }
    private void DisplayPlayerProperties(Player player)
    {
        DisableAllPropertyDisplays();
        PlayerProperties = player;
        ShowPlayerProperties = true;
    }

    private bool ShowEnemyProperties { get; set; } = false;
    private Enemy EnemyProperties { get; set; }
    private void DisplayEnemyProperties(Enemy enemy)
    {
        DisableAllPropertyDisplays();
        EnemyProperties = enemy;
        ShowEnemyProperties = true;
    }

    private bool ShowNpcProperties { get; set; } = false;
    private Npc NpcProperties { get; set; }
    private void DisplayNpcProperties(Npc npc)
    {
        DisableAllPropertyDisplays();
        NpcProperties = npc;
        ShowNpcProperties = true;
    }

    private void DisableAllPropertyDisplays()
    {
        ShowItemProperties = false;
        ShowPlayerProperties = false;
        ShowEnemyProperties = false;
        ShowNpcProperties = false;
    }

    private void Move(int x, int y)
    {
        Position.X += x;
        Position.Y += y;
        StateHasChanged();
    }
}

